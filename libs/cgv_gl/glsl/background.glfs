#version 150

in vec2 texcoord_fs;

uniform vec4 color_1 = vec4(1.0,1.0,1.0,1.0);
uniform vec4 color_2 = vec4(0.0,0.0,0.0,1.0);

// different modes are 0 ... const color_1, 1 ... horizontal gradient, 2 ... vertical gradient, 3 ... checker board
uniform int mode = 1;
uniform int checker_step = 16;
uniform int w = 640;
uniform int h = 480;

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
void finish_fragment(vec4 color, float depth);
//***** end interface of fragment.glfs ***********************************


const vec4 panel_colors[4] = vec4[4](
	vec4(1.0, 1.0, 1.0, 1.0),
	vec4(1.0, 0.0, 0.0, 1.0),
	vec4(0.0, 1.0, 0.0, 1.0),
	vec4(0.0, 0.0, 1.0, 1.0)
);

vec4 gamma_pattern(int x, int y)
{
	float y_float = 1.0-float(y)/float(h);
	int panel = int(floor(4.0*y_float));
	float x_float = float(x)/float(w);
	float y_local = 4.0*(y_float - 0.25*float(panel));
	if (abs(y_local - 0.5) > 0.1) {
		if (x == w/2)
			return color_1;
		if (x == int(round(0.729740053*w)))
			return color_1;
		if (x == int(round(0.25*w)))
			return color_1;
	}

	vec4 panel_color = panel_colors[panel];
	vec4 color;
	if (y_local > 0.5)
		color = x_float * panel_color;
	else {
		if ((x&1)==(y&1))
			color = panel_color;
		else
			color = vec4(0.0,0.0,0.0,1.0);
	}
	return color;
}

void main()
{
	vec4 frag_color = color_1;
	switch (mode) {
	case 1 : 
		frag_color = mix(color_1,color_2,texcoord_fs.x); 
		break;
	case 2 : 
		frag_color = mix(color_1,color_2,texcoord_fs.y); 
		break;
	case 3 : 
		frag_color = (mod(int(gl_FragCoord.x) / checker_step, 2) == 
		              mod(int(gl_FragCoord.y) / checker_step, 2) ) ? color_1 : color_2;
		break;
	case 4 :
		frag_color = gamma_pattern(int(gl_FragCoord.x), int(gl_FragCoord.y));
		break;
	}
	finish_fragment(frag_color);
}
